/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package chat.client;

import java.awt.GraphicsConfiguration;
import java.awt.Rectangle;
import java.rmi.RemoteException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;

/**
 *
 * @author Karl
 */
public class ChatClientFrame extends javax.swing.JFrame {
    private ChatClient model;
    private String pseudoName;
    
    /**
     * Creates new form ChatClientFrame
     */
    public ChatClientFrame(ChatClient model) {
        this.model = model;
        initComponents();
        this.model.addListener(this.chatFlow);
    }
    
    /**
     * Show the connection error frame.
     * The current frame will be closed. The error frame closure initiate the runtime stopping procedure in error.
     */
    private void showConnectionError(){
        JFrame frame = this.errorConnectionDialog;
        GraphicsConfiguration gc = frame.getGraphicsConfiguration();  
        Rectangle bounds = gc.getBounds();
        frame.setLocation((int) ((bounds.width / 2) - (frame.getSize().width / 2)),  
                          (int) ((bounds.height / 2) - (frame.getSize().height / 2)));
        this.setVisible(false);
        frame.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        errorConnectionDialog = new javax.swing.JFrame();
        errorConnectionPanel = new javax.swing.JPanel();
        errorConnectionQuit = new javax.swing.JButton();
        errorConnectionMessage = new javax.swing.JLabel();
        mainPanel = new javax.swing.JPanel();
        optionsPanel = new javax.swing.JPanel();
        serverChannelLabel = new javax.swing.JLabel();
        serverHostLabel = new javax.swing.JLabel();
        pseudoLabel = new javax.swing.JLabel();
        connect = new javax.swing.JButton();
        serverHost = new javax.swing.JTextField();
        serverChannel = new javax.swing.JTextField();
        pseudo = new javax.swing.JTextField();
        sendPanel = new javax.swing.JPanel();
        messageSend = new javax.swing.JButton();
        messageField = new javax.swing.JTextField();
        flowPanel = new javax.swing.JPanel();
        chatFlowScroll = new javax.swing.JScrollPane();
        chatFlow = new chat.client.ChatFlow();
        menu = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuFileQuit = new javax.swing.JMenuItem();
        menuOptions = new javax.swing.JMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();

        errorConnectionDialog.setTitle("Error");
        errorConnectionDialog.setMinimumSize(new java.awt.Dimension(220, 110));
        errorConnectionDialog.setResizable(false);
        errorConnectionDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                errorConnectionDialogWindowClosing(evt);
            }
        });

        errorConnectionPanel.setMinimumSize(new java.awt.Dimension(155, 47));
        errorConnectionPanel.setPreferredSize(new java.awt.Dimension(155, 47));
        java.awt.GridBagLayout jPanel1Layout = new java.awt.GridBagLayout();
        jPanel1Layout.columnWidths = new int[] {0};
        jPanel1Layout.rowHeights = new int[] {0, 10, 0};
        errorConnectionPanel.setLayout(jPanel1Layout);

        errorConnectionQuit.setText("Quitter");
        errorConnectionQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                errorConnectionQuitActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        errorConnectionPanel.add(errorConnectionQuit, gridBagConstraints);

        errorConnectionMessage.setForeground(new java.awt.Color(204, 0, 0));
        errorConnectionMessage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        errorConnectionMessage.setText("Erreur de connexion.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        errorConnectionPanel.add(errorConnectionMessage, gridBagConstraints);

        javax.swing.GroupLayout errorConnectionDialogLayout = new javax.swing.GroupLayout(errorConnectionDialog.getContentPane());
        errorConnectionDialog.getContentPane().setLayout(errorConnectionDialogLayout);
        errorConnectionDialogLayout.setHorizontalGroup(
            errorConnectionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(errorConnectionDialogLayout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addComponent(errorConnectionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );
        errorConnectionDialogLayout.setVerticalGroup(
            errorConnectionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(errorConnectionDialogLayout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addComponent(errorConnectionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Chat Client");
        setResizable(false);

        mainPanel.setLayout(new java.awt.BorderLayout());

        serverChannelLabel.setLabelFor(serverChannel);
        serverChannelLabel.setText("Channel :");

        serverHostLabel.setLabelFor(serverHost);
        serverHostLabel.setText("Serveur :");

        pseudoLabel.setLabelFor(pseudo);
        pseudoLabel.setText("Pseudo :");

        connect.setText("Connexion");
        connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectActionPerformed(evt);
            }
        });

        serverHost.setText("localhost");

        serverChannel.setText("chat");
        serverChannel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serverChannelActionPerformed(evt);
            }
        });

        pseudo.setText("anonymous");

        javax.swing.GroupLayout optionsPanelLayout = new javax.swing.GroupLayout(optionsPanel);
        optionsPanel.setLayout(optionsPanelLayout);
        optionsPanelLayout.setHorizontalGroup(
            optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsPanelLayout.createSequentialGroup()
                .addComponent(serverHostLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(serverHost, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(serverChannelLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(serverChannel, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pseudoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pseudo, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(connect, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2))
        );
        optionsPanelLayout.setVerticalGroup(
            optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(serverChannelLabel)
                .addComponent(serverHostLabel)
                .addComponent(pseudoLabel)
                .addComponent(connect)
                .addComponent(serverHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(serverChannel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(pseudo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        mainPanel.add(optionsPanel, java.awt.BorderLayout.PAGE_START);

        messageSend.setText("Envoyer");
        messageSend.setEnabled(false);
        messageSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messageSendActionPerformed(evt);
            }
        });

        messageField.setEnabled(false);
        messageField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messageSendActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout sendPanelLayout = new javax.swing.GroupLayout(sendPanel);
        sendPanel.setLayout(sendPanelLayout);
        sendPanelLayout.setHorizontalGroup(
            sendPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sendPanelLayout.createSequentialGroup()
                .addComponent(messageSend, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(messageField, javax.swing.GroupLayout.DEFAULT_SIZE, 611, Short.MAX_VALUE))
        );
        sendPanelLayout.setVerticalGroup(
            sendPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sendPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(messageField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(messageSend))
        );

        mainPanel.add(sendPanel, java.awt.BorderLayout.PAGE_END);

        chatFlowScroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        chatFlowScroll.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        chatFlow.setColumns(20);
        chatFlow.setLineWrap(true);
        chatFlow.setRows(5);
        chatFlow.setAutoTextScroll(true);
        chatFlow.setEnabled(false);
        chatFlow.setFocusable(false);
        chatFlowScroll.setViewportView(chatFlow);

        javax.swing.GroupLayout flowPanelLayout = new javax.swing.GroupLayout(flowPanel);
        flowPanel.setLayout(flowPanelLayout);
        flowPanelLayout.setHorizontalGroup(
            flowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(chatFlowScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 714, Short.MAX_VALUE)
        );
        flowPanelLayout.setVerticalGroup(
            flowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(flowPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chatFlowScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE)
                .addContainerGap())
        );

        mainPanel.add(flowPanel, java.awt.BorderLayout.CENTER);

        menuFile.setText("Fichier");

        menuFileQuit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        menuFileQuit.setText("Quitter");
        menuFileQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFileQuitActionPerformed(evt);
            }
        });
        menuFile.add(menuFileQuit);

        menu.add(menuFile);

        menuOptions.setText("Options");

        jCheckBoxMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        jCheckBoxMenuItem1.setText("Défilement automatique");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, chatFlow, org.jdesktop.beansbinding.ELProperty.create("${autoTextScroll}"), jCheckBoxMenuItem1, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        menuOptions.add(jCheckBoxMenuItem1);

        menu.add(menuOptions);

        setJMenuBar(menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuFileQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFileQuitActionPerformed
        Runtime.getRuntime().exit(0);
    }//GEN-LAST:event_menuFileQuitActionPerformed

    private void connectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectActionPerformed
        try {
            //Disable connection gui
            this.pseudoLabel.setEnabled(false);
            this.pseudo.setEnabled(false);
            this.serverChannelLabel.setEnabled(false);
            this.serverChannel.setEnabled(false);
            this.serverHostLabel.setEnabled(false);
            this.serverHost.setEnabled(false);
            this.connect.setEnabled(false);

            //Set default host if empty host is given
            String host;
            if(this.serverHost.getText().isEmpty()){
                host = "localhost";
                this.serverHost.setText(host);
            }
            else{
                host = this.serverHost.getText();
            }
            
            //Set default channel name if empty channel name is given
            String channel;
            if(this.serverChannel.getText().isEmpty()){
                channel = "chat";
                this.serverChannel.setText(channel);
            }
            else{
                channel = this.serverChannel.getText();
            }
            
            //Connect the model to the server
            this.model.connect(host, channel);
            
            //Set default pseudo if empty pseudo is given
            if(this.pseudo.getText().isEmpty()){
                this.pseudoName = "anonymous";
                this.pseudo.setText(this.pseudoName);
            }
            else{
                this.pseudoName = this.pseudo.getText();
            }
            
            //Connected message.
            this.chatFlow.setText("Connected.");
            
            //Active messages sending gui
            this.chatFlow.setEnabled(true);
            this.messageField.setEnabled(true);
            this.messageSend.setEnabled(true);
            
        } catch (RemoteException ex) {
            Logger.getLogger(ChatClientFrame.class.getName()).log(Level.SEVERE, null, ex);
            
            this.showConnectionError();
        }
    }//GEN-LAST:event_connectActionPerformed

    private void errorConnectionQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_errorConnectionQuitActionPerformed
        Runtime.getRuntime().exit(1);
    }//GEN-LAST:event_errorConnectionQuitActionPerformed

    private void errorConnectionDialogWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_errorConnectionDialogWindowClosing
        Runtime.getRuntime().exit(1);
    }//GEN-LAST:event_errorConnectionDialogWindowClosing

    private void messageSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_messageSendActionPerformed
        try {
            this.model.send(this.pseudoName + " : " + this.messageField.getText());
            this.messageField.setText(null);
        } catch (RemoteException ex) {
            Logger.getLogger(ChatClientFrame.class.getName()).log(Level.SEVERE, null, ex);
            
            this.showConnectionError();
        }
    }//GEN-LAST:event_messageSendActionPerformed

    private void serverChannelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serverChannelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_serverChannelActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private chat.client.ChatFlow chatFlow;
    private javax.swing.JScrollPane chatFlowScroll;
    private javax.swing.JButton connect;
    private javax.swing.JFrame errorConnectionDialog;
    private javax.swing.JLabel errorConnectionMessage;
    private javax.swing.JPanel errorConnectionPanel;
    private javax.swing.JButton errorConnectionQuit;
    private javax.swing.JPanel flowPanel;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menu;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenuItem menuFileQuit;
    private javax.swing.JMenu menuOptions;
    private javax.swing.JTextField messageField;
    private javax.swing.JButton messageSend;
    private javax.swing.JPanel optionsPanel;
    private javax.swing.JTextField pseudo;
    private javax.swing.JLabel pseudoLabel;
    private javax.swing.JPanel sendPanel;
    private javax.swing.JTextField serverChannel;
    private javax.swing.JLabel serverChannelLabel;
    private javax.swing.JTextField serverHost;
    private javax.swing.JLabel serverHostLabel;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
